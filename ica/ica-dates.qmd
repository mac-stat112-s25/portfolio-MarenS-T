---
title: "Dates"
format: html
---

## Load Data

```{r}
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')

# Check it out
head(penguins)
```


## Exercises Part 1: Same Verbs, New Tricks

### Exercise 1: More Filtering 

#### Part a: 

```{r}
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
penguins  |>
  filter(species %in% c("Adelie", "Chinstrap")) |>
  count(species)
```

```{r}
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
penguins |> 
  filter(species != "Gentoo") |>
  count(species)
```

#### Part b

```{r}
head(penguins)
```

**Example 1**

```{r}
# NOTE the use of is.na()
penguins |> 
  summarize(sum(is.na(body_mass_g)))
```

New data set that removes these penguins: 
```{r}
# NOTE the use of is.na()
penguins_w_body_mass <- penguins |> 
  filter(!is.na(body_mass_g))

# Compare the number of penguins in this vs the original data
nrow(penguins_w_body_mass)
```

```{r}
nrow(penguins)
```

```{r}
penguins_w_body_mass |> 
  summarize(sum(is.na(sex)))
```

**Example 2**

```{r}
penguins_complete <- penguins |> 
  na.omit()
```

```{r}
nrow(penguins_complete)
```

```{r}
nrow(penguins)
```

**Part c**

We should only use na.omit() in extreme situations because it deletes information on penguins that could be relevant to our research question. 

### Exercise 2: More Selecting

```{r}
# First: recall the variable names
names(penguins)
```
```{r}
# Use a shortcut to keep everything but the year and island variables
penguins |>
  select(-year, -island)
```

```{r}
# Use a shortcut to keep only species and the penguin characteristics measured in mm

penguins |>
  select(species, contains("mm"))
```

```{r}
# Use a shortcut to keep only species and bill-related measurements

penguins |> 
  select(species, contains("bill"))
```

```{r}
# Use a shortcut to keep only species and the length-related characteristics

penguins |>
  select(species, contains("length"))
```

### Exercise 3: Arranging, Counting, & Grouping by Multiple Vars

```{r}
# Change this code to sort the penguins by species, and then island name
# NOTE: The first row should be an Adelie penguin living on Biscoe island
penguins |> 
  arrange(species) |>
  arrange(island)
```

```{r}
# Change this code to count the number of male/female penguins observed for each species
penguins |> 
  count(species, sex)
```

```{r}
# Change this code to calculate the average body mass by species and sex
penguins |> 
  group_by(species, sex) |> 
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```

### Exercise 4: Dates

```{r}
# Get today's date
as.Date(today())
```

```{r}
# Let's store this as "today" so we can work with it below
today <- as.Date(today())

# Check out the class of this object
class(today)
```

```{r}
year(today)
```

```{r}
# What do these lines produce / what's their difference?
month(today)
```

```{r}
month(today, label = TRUE)
```

```{r}
# What does this number mean?
week(today)
```

```{r}
# What do these lines produce / what's their difference?
mday(today)
```

```{r}
yday(today)  # This is often called the "Julian day"
```

```{r}
# What do these lines produce / what's their difference?
wday(today)
```

```{r}
wday(today, label = TRUE)
```

```{r}
# What do the results of these 2 lines tell us?
today >= ymd("2024-02-14")
```

```{r}
today < ymd("2024-02-14")
```

## Exercises Part 2: Application

```{r}
library(mosaic)
data("Birthdays")
head(Birthdays)
```

### Exercise 5: Warming Up

```{r}
# How many days of data do we have for each state?
Birthdays |> 
  group_by(state) |>
  count()

# How many total births were there in this time period?
Birthdays |> 
  mutate(total_births = sum(births))

# How many total births were there per state in this time period, sorted from low to high?
Birthdays |>
  group_by(state) |>
  mutate(state_totals = sum(births))
```

### Exercise 6: Homework Reprise

```{r}
daily_births <- Birthdays |>
  group_by(date) |>
  summarize(births_per_day = sum(births)) |>
  select(date, births_per_day)
 

head(daily_births)
```

## Exercise 7: Wrangle and plot

### Part a

```{r}
Birthdays |>
  group_by(year, month) |>
  summarize(monthly = sum(births)) |>
  mutate(month_abbr = month(month, label = TRUE, abbr = TRUE)) |>
    select(monthly, month_abbr, year) |>
ggplot(aes(x=month_abbr, y=monthly)) +
  geom_point(color = "lightblue") +
  geom_boxplot(alpha = 0.5, color = "pink")

```

Most births in august, least in february. 

###Part b 

```{r}
Birthdays |>
  select(state, year, month, day, births, date) |>
  filter(year == "1988") |>
  mutate(week = week(date)) |>
  filter(week != 53) |>
  group_by(week, state) |> 
  summarize(weekly_total = sum(births)) |>
  select(week, weekly_total, state) |>
  ggplot(aes(x=week, y=weekly_total, color = state)) + 
  geom_line()
  
```

CA has a lot more births, other lesser outliers, and then most in the range between zero to 1700 births weekly. 

### Part c
```{r}
Birthdays |>
  select(state, year, month, day, births, date) |>
  filter(year == "1988", state %in% c("CA", "MN")) |>
  mutate(week = week(date)) |>
  filter(week != 53) |>
  group_by(week, state) |> 
  summarize(weekly_total = sum(births)) |>
  select(week, weekly_total, state) |>
  ggplot(aes(x=week, y=weekly_total, color = state)) + 
  geom_line()
  
```
I think that the poulation of colder states tend to be smaller so this trend will carry over to other states when comparing births.

## Exercise 8: More Practice
### Part a
Create a dataset with only births in Massachusetts (MA) in 1979 and sort the days from those with the most births to those with the fewest.
```{r}
Birthdays |>
  select(state, year, month, day, births, date) |>
  filter(year == "1979", state == "MA") |>
  group_by(date) |>
  mutate(day_total = sum(births)) |>
  arrange(desc(day_total)) |>
  head()
```
Make a table showing the five states with the most births between September 9, 1979 and September 12, 1979, including the 9th and 12th. Arrange the table in descending order of births.

```{r}
Birthdays |>
  filter(year == "1979", month == "9", day >= 9, day <= 12) |>
  group_by(state) |>
  summarize(period_totals = sum(births)) |>
  arrange(desc(period_totals)) |>
  top_n(5, period_totals) |>
  print()
  
```

