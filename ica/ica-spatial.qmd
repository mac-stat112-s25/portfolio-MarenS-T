---
title: "Spatial Viz"
---

Use this file for practice with the **spatial viz** in-class activity.  Refer to the class website for details.

##Reading Activities

```{r}
# Load tidyverse package for plotting and wrangling
library(tidyverse)

# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |> 
  mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |> 
  filter(address != "c")

# Check it out
head(energy)
```

### Example 1
What was the range and typical energy used each month, as measured by therms? How does this differ by address?
```{r}
ggplot(energy, aes(x=therms, y=address, fill=address)) +
  geom_boxplot()
```
### Example 2
How did energy use (therms) change over time (date) at the two addresses?
```{r}
ggplot(energy, aes(y=therms, x=date, color=address)) +
  geom_point() +
  geom_smooth() +
  facet_wrap(~ address)
```

### Example 3
How did the typical energy use (therms) at the two addresses change before and after they were renovated?


```{r}
ggplot(energy, aes(y=therms, x=date, color=renovated)) +
  geom_point() +
  geom_smooth(method="lm") +
  facet_wrap(~ address)
```

### Example 4
That seems unfortunate that energy usage went up after renovations. But also fishy.

Take 5 minutes (in your groups) to try and explain what’s going on here. Think: What confounding or lurking or omitted variable related to energy usage are we ignoring here? Try to make some plots to prove your point.
```{r}
ggplot(energy, aes(x=date,y=hdd, color=address)) +
  geom_smooth()
```
So: HDD goes up over time

And:
```{r}
ggplot(energy, aes(x=date, y=therms, color=address)) +
  geom_smooth()
```
Therms go up in almost the exact same pattern as HDD 

### Example 5
Let’s summarize the punchlines by filling in the ???. It seemed that:

After renovation…
energy use increased.
BUT this was explained by a confounding or omitted or lurking variable: hdd

After renovation…
hdd went up…
which then leads to higher energy use.
Thus, when controlling for hdd, renovations led to decreased energy use.


## Preview

### Part 1: Interactive points on a map with leaflet

Leaflet is an open-source JavaScript library for creating maps. We can use it inside R through the leaflet package.

This uses a different plotting framework than ggplot2, but still has a tidyverse feel (which will become more clear as we learn other tidyverse tools!).

The general steps are as follows:

Create a map widget by calling leaflet() and telling it the data to use.
Add a base map using addTiles() (the default) or addProviderTiles().
Add layers to the map using layer functions (e.g. addMarkers(), addPolygons()).
Print the map widget to display it.
:::

## Exercise 1: A leaflet with markers / points

```{r}
fave_places <- read.csv("https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv")

# Check it out
head(fave_places)
```
### Part a
```{r}
# Load the leaflet package
library(leaflet)

# Just a plotting frame
leaflet(data = fave_places)
```

```{r}
# Now what do we have?
leaflet(data = fave_places) |> 
  addTiles()
```

```{r}
# Now what do we have?
# longitude and latitude refer to the variables in our data
leaflet(data = fave_places) |> 
  addTiles() |> 
  addMarkers(lng = ~longitude, lat = ~latitude)
```

### Part b

Details: 
```{r}
# Load package needed to change color
library(gplots)

# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |> 
  addTiles() |> 
  addCircles(color = col2hex("red"))
```

```{r}
# We can change the background
# Mark locations with yellow dots
# And connect the dots, in their order in the dataset, with green lines
# (These green lines don't mean anything here, but would if this were somebody's travel path!)
leaflet(data = fave_places) |>
  addProviderTiles("USGS") |>
  addCircles(weight = 10, opacity = 1, color = col2hex("yellow")) |>
  addPolylines(
    lng = ~longitude,
    lat = ~latitude,
    color = col2hex("green")
  )
```
addProviderTiles() changes the base map.
To explore all available provider base maps, type providers in the console. (Though some don’t work :/)

Use addMarkers() or addCircles() to mark locations. Type ?addControl into the console to pull up a help file which summarizes the aesthetics of these markers and how you can change them. For example:

weight = how thick to make the lines, points, pixels
opacity = transparency (like alpha in ggplot2)
colors need to be in “hex” form. We used the col2hex() function from the gplots library to do that

## Exercise 3: My turn
### part 1: Loading the Data
```{r}
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
```

```{r}
# Don't worry about the syntax
starbucks_mn <- starbucks |>   
  filter(Country == "US", State.Province == "MN")
```

```{r}
leaflet(data = starbucks_mn) |> 
  addTiles() |> 
  addMarkers(lng = ~Longitude, lat = ~Latitude)
```

### Part 2: Static Points on a Map
Laflet is only good for static maps and is not very good at plotting many points

### Part 3: Simple Scatterplot
Let’s start with the ggplot() tools we already know. Construct a scatterplot of all starbucks locations, not just those in Minnesota, with:

Latitude and Longitude coordinates (which goes on the y-axis?!)
Make the points transparent (alpha = 0.2) and smaller (size = 0.2)
It’s pretty cool that the plots we already know can provide some spatial context. But what don’t you like about this plot?

```{r}
ggplot(starbucks_mn, aes(x=Longitude, y=Latitude)) +
  geom_point(alpha=0.2, size=0.2)
```

Gives longitude and latitude but does not give any information on the spatial locatio  of the locations, only the coordinates. 

###Exercise 4
#### Part a
```{r}
# Load the package
library(rnaturalearth)

# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")
```

#### Part b
```{r}
# What does this code produce?
# What geom are we using for the point map?
ggplot(world_boundaries) + 
  geom_sf()
```

### Exercise 4
#### Part a
```{r}
# Load the package
library(rnaturalearth)

# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")
```

#### Part b
Build a new map: 
```{r}
# What does this code produce?
# What geom are we using for the point map?
ggplot(world_boundaries) + 
  geom_sf()
```


```{r}
# Load package needed to change map theme
library(mosaic)

# Add a point for each Starbucks
# NOTE: The Starbucks info is in our starbucks data, not world_boundaries
# How does this change how we use geom_point?!
ggplot(world_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3, size = 0.2, color = "darkgreen"
  ) +
  theme_map()
```

#### Part c: what we learned
Starbucks is most concentrated on the east and west coasts of America, Europe, and east and south Asia. 

### Exercise 5: Zooming in on some countries
```{r}
# We'll learn this syntax soon! Don't worry about it now.
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))
```


```{r}
cma_boundaries <- ne_states(
  country = c("canada", "mexico", "united states of america"),
  returnclass = "sf")
```

#### Part b

```{r}
# Just the boundaries
ggplot(cma_boundaries) + 
  geom_sf()
```

```{r}
# Add the points
# And zoom in
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50)) +
  theme_map()
```

### Exercise 6: A state and county-level map



























